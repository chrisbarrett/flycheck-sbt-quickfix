;;; flycheck-sbt-quickfix.el --- Flycheck checker for sbt-quickfix plugin.  -*- lexical-binding: t; -*-

;; Copyright (C) 2016 Chris Barrett

;; Author: Chris Barrett <chris.d.barrett@me.com>
;; Version: 0.1
;; Package-Requires: ((dash "2.12.1") (f "0.18.1") (flycheck "0.26-cvs") (s "1.10.0"))

;; This file is not part of GNU Emacs.

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; Flycheck checker for sbt-quickfix plugin.
;;
;; To use the checker, install this package and add the following to your Emacs
;; configuration:
;;
;;    (add-hook 'scala-mode-hook #'flycheck-sbt-quickfix-init)
;;

;;; Code:

(require 'dash)
(require 'f)
(require 'flycheck)
(require 's)
(require 'rx)

(defun flycheck-sbt-quickfix--find-project-root ()
  (or (locate-dominating-file default-directory "target")
      (locate-dominating-file default-directory "build.sbt")
      (locate-dominating-file default-directory "src")
      (locate-dominating-file default-directory ".git")))

(defun flycheck-sbt-quickfix--quickfix-file-path (project-root)
  (f-join project-root "target" "quickfix" "sbt.quickfix"))

(defun flycheck-sbt-quickfix--parse-quickfix-line (line)
  (-when-let ((_ level filename line msg)
              (s-match (rx bol "[" (group (or "error" "warn")) "]"
                           (* space)
                           (group (+ (not (any ":"))))
                           ":"
                           (group (+ num))
                           ":"
                           (* space)
                           (group (+ nonl)))
                       line))
    (flycheck-error-new :line (string-to-number line)
                        :filename filename
                        :message msg
                        :level
                        (pcase level
                          ("warn" 'warning)
                          ("error" 'error)
                          (x (error "Unknown error level: %s" x))))))

(defun flycheck-sbt-quickfix--parse-quickfix-file (str)
  (-keep #'flycheck-sbt-quickfix--parse-quickfix-line (s-lines str)))

(defun flycheck-sbt-quickfix--start (checker callback)
  (let ((quickfix-file (-some->> (flycheck-sbt-quickfix--find-project-root) (flycheck-sbt-quickfix--quickfix-file-path))))
    (cond
     ((not (f-exists? quickfix-file))
      (let ((msg (format "No quickfix file found at path %s" quickfix-file)))
        (funcall callback 'suspicious msg)))
     (t
      (let ((errors (flycheck-sbt-quickfix--parse-quickfix-file (f-read-text quickfix-file))))
        (dolist (err errors)
          (setf (flycheck-error-checker err) checker))
        (funcall callback 'finished errors))))))

(defun flycheck-sbt-quickfix--verify (_name)
  (let ((quickfix-file-exists (-some->> (flycheck-sbt-quickfix--find-project-root)
                                        (flycheck-sbt-quickfix--quickfix-file-path)
                                        (f-exists?))))
    (list
     (flycheck-verification-result-new
      :label "Quickfix file exists"
      :message (or quickfix-file-exists "none")
      :face (if quickfix-file-exists 'success '(bold warning))))))

(flycheck-define-generic-checker 'sbt-quickfix
  "A flycheck checker using the file generated by the sbt-quickfix plugin."
  :start #'flycheck-sbt-quickfix--start
  :interrupt #'ignore
  :modes '(scala-mode)
  :next-checkers '((warning . scala-scalastyle))
  :verify #'flycheck-sbt-quickfix--verify)

;;;###autoload
(defun flycheck-sbt-quickfix-init ()
  (when (eq major-mode 'scala-mode)
    (flycheck-select-checker 'sbt-quickfix)))

(provide 'flycheck-sbt-quickfix)

;;; flycheck-sbt-quickfix.el ends here
